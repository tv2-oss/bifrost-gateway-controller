name: Build release

on:
  push:
    tags:
      - '*'
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: jetify-com/devbox-install-action@22b0f5500b14df4ea357ce673fbd4ced940ed6a1 # tag=v0.13.0

      - name: Run tests
        run: |
          devbox run -- make test


  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: ["tests"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: jetify-com/devbox-install-action@22b0f5500b14df4ea357ce673fbd4ced940ed6a1 # tag=v0.13.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # To be compatible with ENVs in 'make build'. Used in '.goreleaser.yaml'
      - name: Get SHA that triggered release
        run: |
          echo -n "HEAD_SHA=" >>${GITHUB_ENV}
          git rev-parse --short $GITHUB_SHA >>${GITHUB_ENV}

      # This repo both have a Helm chart and a controller with
      # separate tagging. Filter tags to tell GoReleaser which tag to
      # use for the controller. We ignore non semver tags.
      - name: Set GoReleaser GORELEASER_PREVIOUS_TAG
        run: |
          echo "GORELEASER_PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -E '^[0-9]+\..*' | head -n 2 | tail -n 1)" >> ${GITHUB_ENV}

      # Build release manifests - not to release these, but to force a failure
      # below if repo does not already contain updated manifests
      - name: Build release manifests
        run: |
          rm -rf config/release
          devbox run -- make manifest-build

      - name: Make release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run:
          devbox run -- goreleaser release

      - name: Container metadata
        id: meta
        run: |
          cat dist/artifacts.json  |jq
          DIGEST=$(cat dist/artifacts.json  | jq '[ .[] | select( .type== "Docker Manifest") | .extra.Digest ]' | jq -r '.[0]')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          IMAGE=$(echo ghcr.io/${{ github.repository }})
          echo "image=$IMAGE@$DIGEST" >> $GITHUB_OUTPUT

    outputs:
      digest: ${{ steps.meta.outputs.digest }}
      image: ${{ steps.meta.outputs.image }}


  sign:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: none
      packages: write
      id-token: write

    steps:
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # tag=v3.8.2

    - name: Sign container
      run: cosign sign --yes ${{ needs.release.outputs.image }}


  verify:
    needs: [ release, sign ]
    runs-on: ubuntu-latest

    steps:
    - uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # tag=v3.8.2

    - name: Verify signature
      run: cosign verify --certificate-identity-regexp 'https://github.com/${{ github.repository }}/.github/workflows/build-release.yaml@refs/.*' --certificate-oidc-issuer https://token.actions.githubusercontent.com ${{ needs.release.outputs.image }}
