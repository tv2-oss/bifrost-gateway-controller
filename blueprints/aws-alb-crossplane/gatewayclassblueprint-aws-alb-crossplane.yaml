apiVersion: gateway.tv2.dk/v1alpha1
kind: GatewayClassBlueprint
metadata:
  name: aws-alb-crossplane
spec:
  values:
    default:
      healthCheck:
        interval: 5
        timeout: 4
        threshold: 2
        path: /healthz/ready
        port: 15021
      hpa:
        minReplicas: 1  # optional
        maxReplicas: 3  # Optional, will default to minReplicas if minReplicas is defined
        averageUtilization: 60
      ingressAcls:
        cidrs:
        - 0.0.0.0/0
      pdb:
        minAvailable: "1"
        maxUnavailable:
      tags: []
    # Values required by this blueprint without defaults:
    #   providerConfigName: "example-crossplane-provider-name"
    #   region: "example-region"
    #   vpcId:  "example-vpc"
    #   subnets:
    #   - "example-subnet1"
    #   - "example-subnet2"
    #   - "example-subnet3"
    #   upstreamSecurityGroup: "example-cluster-sg"
    #   certificateArn: "example-cert-arn"

  # The following are templates used to 'implement' a 'parent' Gateway
  gatewayTemplate:
    status:
      template: |
        addresses:
        - type: Hostname
          value: {{ (index .Resources.LB 0).status.atProvider.dnsName }}
    resourceTemplates:
      childGateway: |
        apiVersion: gateway.networking.k8s.io/v1beta1
        kind: Gateway
        metadata:
          name: {{ .Gateway.metadata.name }}-child
          namespace: {{ .Gateway.metadata.namespace }}
          annotations:
            networking.istio.io/service-type: ClusterIP
            {{ if .Values.tags }}
            {{ toYaml .Values.tags | nindent 4 }}
            {{ end }}
          labels:
            external-dns/ignore: "true"
            {{ toYaml .Gateway.metadata.labels | nindent 4 }}
        spec:
          gatewayClassName: istio
          infrastructure:
            parametersRef:
              group: ""
              kind: ConfigMap
              name: {{ .Gateway.metadata.name }}-child
          listeners:
          {{- range .Gateway.spec.listeners }}
          - name: {{ .name }}
            port: 80
            protocol: HTTP
            {{ if get . "hostname" }}
            hostname: {{ .hostname | quote }}
            {{ end -}}
            {{ if get . "allowedRoutes" }}
            allowedRoutes:
              {{ toYaml .allowedRoutes | nindent 6 }}
            {{ end -}}
          {{- end }}
      childGatewayConfig: |
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: {{ .Gateway.metadata.name }}-child
          namespace: {{ .Gateway.metadata.namespace }}
          labels:
            {{ toYaml .Gateway.metadata.labels | nindent 4 }}
        data:
          deployment: |
            spec:
              template:
                spec:
                  containers:
                  - name: istio-proxy
                    resources:
                      requests:
                        cpu: "1"
                        memory: 4Gi
                      limits:
                        cpu: "1"
                        memory: 4Gi
                  terminationGracePeriodSeconds: 60
                  topologySpreadConstraints:
                  - labelSelector:
                      matchLabels:
                        "gateway.networking.k8s.io/gateway-name": {{ .Gateway.metadata.name }}-child
                    maxSkew: 3
                    topologyKey: "topology.kubernetes.io/zone"
                    whenUnsatisfiable: "ScheduleAnyway"
      LB: |
        apiVersion: elbv2.aws.m.upbound.io/v1beta1
        kind: LB
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            dropInvalidHeaderFields: true
            internal: {{ .Values.internal }}
            name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            region: {{ .Values.region }}
            securityGroupSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            subnetMapping:
              {{ range .Values.subnets }}
              - subnetId: {{ . }}
              {{ end }}
            tags:
              gateway-controller/gw-name: {{ .Gateway.metadata.name }}
              gateway-controller/gw-namespace: {{ .Gateway.metadata.namespace }}
              {{ if .Values.tags }}
              {{- toYaml .Values.tags | nindent 6 }}
              {{ end }}
      LBTargetGroup: |
        apiVersion: elbv2.aws.m.upbound.io/v1beta1
        kind: LBTargetGroup
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: {{ printf "gw-%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name | substr 0 25}}-{{ printf "%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name | sha1sum | substr 0 6 }}
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            name: {{ printf "gw-%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name | substr 0 25}}-{{ printf "%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name | sha1sum | substr 0 6 }}
            region: {{ .Values.region }}
            vpcId: {{ .Values.vpcId }}
            healthCheck:
              enabled: true
              healthyThreshold: {{ .Values.healthCheck.threshold }}
              interval: {{ .Values.healthCheck.interval }}
              timeout: {{ .Values.healthCheck.timeout }}
              path: {{ .Values.healthCheck.path }}
              port: {{ .Values.healthCheck.port | quote }}
            port: 80
            protocol: HTTP
            tags:
              gateway-controller/gw-name: {{ .Gateway.metadata.name }}
              gateway-controller/gw-namespace: {{ .Gateway.metadata.namespace }}
              {{ if .Values.tags }}
              {{- toYaml .Values.tags | nindent 6 }}
              {{ end }}
            targetType: ip
      LBListenerRedirHttps: |
        apiVersion: elbv2.aws.m.upbound.io/v1beta1
        kind: LBListener
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-redir
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            region: {{ .Values.region }}
            port: 80
            protocol: HTTP
            defaultAction:
            - type: redirect
              redirect:
                port: "443"
                protocol: HTTPS
                statusCode: HTTP_301
            loadBalancerArnSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            tags:
              gateway-controller/gw-name: {{ .Gateway.metadata.name }}
              gateway-controller/gw-namespace: {{ .Gateway.metadata.namespace }}
              {{ if .Values.tags }}
              {{- toYaml .Values.tags | nindent 6 }}
              {{ end }}
      LBListener: |
        apiVersion: elbv2.aws.m.upbound.io/v1beta1
        kind: LBListener
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            region: {{ .Values.region }}
            port: 443
            protocol: HTTPS
            certificateArn: {{ .Values.certificateArn }}
            defaultAction:
            - targetGroupArnSelector:
                matchLabels:
                  tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
              type: forward
            loadBalancerArnSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            tags:
              gateway-controller/gw-name: {{ .Gateway.metadata.name }}
              gateway-controller/gw-namespace: {{ .Gateway.metadata.namespace }}
              {{ if .Values.tags }}
              {{- toYaml .Values.tags | nindent 6 }}
              {{ end }}
      TargetGroupBinding: |
        apiVersion: elbv2.k8s.aws/v1beta1
        kind: TargetGroupBinding
        metadata:
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
          {{ if .Values.tags }}
          annotations:
            {{ toYaml .Values.tags | nindent 4 }}
          {{ end }}
        spec:
          targetGroupARN: {{ (index .Resources.LBTargetGroup 0).status.atProvider.arn }}
          targetType: ip
          serviceRef:
            name: {{ .Gateway.metadata.name }}-child-istio
            port: 80
      SecurityGroup: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroup
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: "SG for ALB"
            name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            region: {{ .Values.region }}
            tags:
              gateway-controller/gw-name: {{ .Gateway.metadata.name }}
              gateway-controller/gw-namespace: {{ .Gateway.metadata.namespace }}
              {{ if .Values.tags }}
              {{- toYaml .Values.tags | nindent 6 }}
              {{ end }}
            vpcId: {{ .Values.vpcId}}
      SecurityGroupRuleEgress80: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-egress80
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: "Traffic towards Istio ingress gateway"
            cidrBlocks:
              - 0.0.0.0/0
            fromPort: 80
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 80
            type: egress
      SecurityGroupRuleEgress15021: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-egress15021
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: "Healthcheck towards Istio ingress gateway"
            cidrBlocks:
              - 0.0.0.0/0
            fromPort: 15021
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 15021
            type: egress
      SecurityGroupRuleIngress80: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-ingress80
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: "External traffic towards ALB port 80"
            cidrBlocks:
              {{ range .Values.ingressAcls.cidrs -}}
              - {{ . }}
              {{ end }}
            fromPort: 80
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 80
            type: ingress
      SecurityGroupRuleIngress443: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-ingress443
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: "External traffic towards ALB port 443"
            cidrBlocks:
              {{ range .Values.ingressAcls.cidrs -}}
              - {{ . }}
              {{ end }}
            fromPort: 443
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 443
            type: ingress
      SecurityGroupRuleUpstreamIngress80: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-upstream80
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: {{ printf "Ingress from gw-%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name }}
            fromPort: 80
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupId: {{ .Values.upstreamSecurityGroup }}
            sourceSecurityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 80
            type: ingress
      SecurityGroupRuleUpstreamIngress15021: |
        apiVersion: ec2.aws.m.upbound.io/v1beta1
        kind: SecurityGroupRule
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}-upstream15021
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          providerConfigRef:
            name: {{ .Values.providerConfigName }}
          forProvider:
            description: {{ printf "Healthcheck ingress from gw-%s-%s" .Gateway.metadata.namespace .Gateway.metadata.name }}
            fromPort: 15021
            protocol: tcp
            region: {{ .Values.region }}
            securityGroupId: {{ .Values.upstreamSecurityGroup }}
            sourceSecurityGroupIdSelector:
              matchLabels:
                tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
            toPort: 15021
            type: ingress
      hpa: |
        {{ if or (get .Values.hpa "minReplicas") (get .Values.hpa "maxReplicas") }}
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
          annotations:
            {{ if .Values.tags }}
            {{ toYaml .Values.tags | nindent 4 }}
            {{ end }}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: {{ .Gateway.metadata.name }}-child-istio
          {{ if get .Values.hpa "minReplicas" }}
          minReplicas: {{ .Values.hpa.minReplicas }}
          {{ end }}
          {{ if get .Values.hpa "maxReplicas" }}
          maxReplicas: {{ .Values.hpa.maxReplicas }}
          {{ else }} # Ensure that max >= min, even when maxReplicas is left undefined
            {{ if get .Values.hpa "minReplicas" }}
          maxReplicas: {{ .Values.hpa.minReplicas }}
            {{ end }}
          {{ end }}
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: {{ .Values.hpa.averageUtilization }}
        {{ end }}
      pdb: |
        {{ if or (get .Values.pdb "minAvailable") (get .Values.pdb "maxUnavailable") }}
        apiVersion: policy/v1
        kind: PodDisruptionBudget
        metadata:
          labels:
            tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
          annotations:
            {{ if .Values.tags }}
            {{ toYaml .Values.tags | nindent 4 }}
            {{ end }}
        spec:
          {{ if get .Values.pdb "minAvailable" }}
          minAvailable: {{ .Values.pdb.minAvailable }}
          {{ else }}
          maxUnavailable: {{ .Values.pdb.maxUnavailable }}
          {{ end }}
          selector:
            # Match the generated Deployment by label
            matchLabels:
              tv2.dk/gw: {{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
              istio.io/gateway-name: {{ .Gateway.metadata.name }}-child
        {{ end }}
      networkPolicy: |
        apiVersion: networking.k8s.io/v1
        kind: NetworkPolicy
        metadata:
          labels:
            {{ toYaml .Gateway.metadata.labels | nindent 4 }}
          name: gw-{{ .Gateway.metadata.namespace }}-{{ .Gateway.metadata.name }}
          namespace: {{ .Gateway.metadata.namespace }}
        spec:
          ingress:
          - ports:
            - port: 80
              protocol: TCP
            - port: 15021
              protocol: TCP
          podSelector:
            matchLabels:
              gateway.networking.k8s.io/gateway-name: {{ .Gateway.metadata.name }}-child
          policyTypes:
          - Ingress

  # The following are templates used to 'implement' a 'parent' HTTPRoute
  httpRouteTemplate:
    resourceTemplates:
      childHttproute: |
        apiVersion: gateway.networking.k8s.io/v1beta1
        kind: HTTPRoute
        metadata:
          labels:
            {{ toYaml .Gateway.metadata.labels | nindent 4 }}
          name: {{ .HTTPRoute.metadata.name }}-child
          namespace: {{ .HTTPRoute.metadata.namespace }}
          annotations:
            {{ if .Values.tags }}
            {{- toYaml .Values.tags | nindent 4 }}
            {{ end }}
        spec:
          parentRefs:
          {{ range .HTTPRoute.spec.parentRefs -}}
          - kind: {{ .kind }}
            name: {{ .name }}-child
            {{ if get . "namespace" }}
            namespace: {{ .namespace }}
            {{ end -}}
          {{ end }}
          {{ if get .HTTPRoute.spec "hostnames" }}
          hostnames:
            {{- toYaml .HTTPRoute.spec.hostnames | nindent 4 }}
          {{ end }}
          {{ if get .HTTPRoute.spec "rules" }}
          rules:
            {{- toYaml .HTTPRoute.spec.rules | nindent 4 }}
          {{ end }}
