#################
.PHONY: setup-e2e-test-cluster
setup-e2e-test-cluster: create-cluster deploy-gateway-api setup-external-dns-test

#################
.PHONY: setup-external-dns-test
setup-external-dns-test: deploy-etcd deploy-coredns deploy-external-dns deploy-multitool

.PHONY: wait-ready-external-dns-test
wait-ready-external-dns-test:
	until kubectl wait pods -l app.kubernetes.io/instance=etcd-test-only --for condition=Ready --timeout=120s   ; do echo "."; sleep 1; done
	until kubectl wait pods -l app.kubernetes.io/instance=coredns-test-only --for condition=Ready --timeout=120s; do echo "."; sleep 1; done
	until kubectl wait pods -l app=multitool --for condition=Ready --timeout=120s                               ; do echo "."; sleep 1; done
	until kubectl wait pods -l app.kubernetes.io/instance=external-dns --for condition=Ready --timeout=120s     ; do echo "."; sleep 1; done

#################
ifeq ($(GATEWAY_API_VERSION),)
GATEWAY_API_VERSION=v0.6.0
endif

.PHONY: gateway-api-upstream-get
gateway-api-upstream-get:
	mkdir -p upstream-gateway-api/crds upstream-gateway-api/webhook
	kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=$(GATEWAY_API_VERSION)" > upstream-gateway-api/crds/crds.yaml
	#kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd/experimental?ref=$(GATEWAY_API_VERSION)" > upstream-gateway-api-crds/crds.yaml
	(cd upstream-gateway-api/webhook && for manifestfile in 0-namespace.yaml admission_webhook.yaml certificate_config.yaml; do curl -sL -O https://raw.githubusercontent.com/kubernetes-sigs/gateway-api/main/config/webhook/$$manifestfile; done)

.PHONY: deploy-gateway-api
deploy-gateway-api:
	kubectl apply -f upstream-gateway-api/crds
	kubectl apply -f upstream-gateway-api/webhook
	echo "Waiting for gateway-api admission server to be ready"
	kubectl -ngateway-system wait --for=condition=Available --timeout=120s deploy gateway-api-admission-server

#################
.PHONY: create-cluster
create-cluster:
	cat test-data/kind-config.yaml_tpl | k8s_ver=1.25.3 envsubst > test-data/kind-config.yaml
	kind create cluster --name kind-gwc-dev-cluster --config test-data/kind-config.yaml

.PHONY: delete-cluster
delete-cluster:
	kind delete cluster --name kind-gwc-dev-cluster

#################
.PHONY: deploy-istio
deploy-istio:
	helm upgrade -i --repo https://istio-release.storage.googleapis.com/charts base base     --version 1.16.1 -n istio-system --create-namespace
	helm upgrade -i --repo https://istio-release.storage.googleapis.com/charts istiod istiod --version 1.16.1 -n istio-system

#################
.PHONY: cluster-load-controller-image
cluster-load-controller-image:
	kind load docker-image controller:latest --name kind-gwc-dev-cluster

#################
.PHONY: deploy-etcd
deploy-etcd:
	helm upgrade -i --repo https://charts.bitnami.com/bitnami etcd-test-only etcd --version 8.6.0 --set auth.rbac.create=false

#################
.PHONY: deploy-coredns
deploy-coredns:
	helm upgrade -i --repo https://coredns.github.io/helm coredns-test-only coredns --version 1.19.7 --values test-data/coredns-test-values.yaml

#################
.PHONY: deploy-multitool
deploy-multitool:
	kubectl create deploy multitool --image praqma/network-multitool

#################
.PHONY: deploy-external-dns
deploy-external-dns:
	helm upgrade -i --repo https://kubernetes-sigs.github.io/external-dns external-dns external-dns --version 1.12.0 --values test-data/external-dns-values.yaml

#################
# https://kind.sigs.k8s.io/docs/user/loadbalancer/
.PHONY: deploy-metallb
deploy-metallb:
	kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.7/config/manifests/metallb-native.yaml
	kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app=metallb --timeout=90s
	scripts/kind-metallb-configure.sh

#################
.PHONY: deploy-contour
deploy-contour:
	helm upgrade -i --repo https://charts.bitnami.com/bitnami contour contour -n projectcontour --version 11.0.0 --create-namespace

# To allow contour to provision from gateway resources
.PHONY: deploy-contour-provisioner
deploy-contour-provisioner:
	kubectl apply -f https://raw.githubusercontent.com/projectcontour/contour/release-1.24/examples/gateway-provisioner/00-common.yaml
	kubectl apply -f https://raw.githubusercontent.com/projectcontour/contour/release-1.24/examples/gateway-provisioner/01-roles.yaml
	kubectl apply -f https://raw.githubusercontent.com/projectcontour/contour/release-1.24/examples/gateway-provisioner/02-rolebindings.yaml
	kubectl apply -f https://raw.githubusercontent.com/projectcontour/contour/release-1.24/examples/gateway-provisioner/03-gateway-provisioner.yaml
	kubectl apply -f test-data/contour-gatewayclass.yaml

#################
.PHONY: deploy-cert-manager
deploy-cert-manager: create-ca-cert ca-cert-secret-create
	helm upgrade -i --repo https://charts.jetstack.io cert-manager cert-manager --version v1.10.1 -n cert-manager --set installCRDs=true
	kubectl apply -f test-data/getting-started/cert-manager-issuer.yaml

.PHONY: create-ca-cert
create-ca-cert:
	scripts/openssl.sh req -x509 -nodes -subj '/C=DK/ST=ACMEprov/L=ACMEloc/O=ACMEcompany/OU=ACMEorg/CN=foo.example.com' -nodes -days 365 -newkey rsa:2048 -keyout foo-example-com.key -out foo-example-com.crt
	chmod 644 foo-example-com.crt
	chmod 600 foo-example-com.key
	scripts/openssl.sh x509 -in foo-example-com.crt -text -noout

.PHONY: ca-cert-secret-create
ca-cert-secret-create:
	kubectl create ns cert-manager
	kubectl -n cert-manager create secret tls ca-key-pair --cert=foo-example-com.crt --key=foo-example-com.key

#################
.PHONY: deploy-aws-load-balancer-controller-crds
deploy-aws-load-balancer-controller-crds:
	kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.5/helm/aws-load-balancer-controller/crds/crds.yaml

#################
.PHONY: deploy-crossplane
deploy-crossplane:
	helm upgrade -i --repo https://charts.crossplane.io/stable crossplane crossplane --version v1.11.0 -n crossplane-system --create-namespace

.PHONY: deploy-crossplane-aws-provider
deploy-crossplane-aws-provider:
	kubectl apply -f test-data/crossplane-aws-provider.yaml
	kubectl wait "providers.pkg.crossplane.io/provider-aws" --for=condition=Installed --timeout=180s
	kubectl wait "providers.pkg.crossplane.io/provider-aws" --for=condition=Healthy --timeout=180s

#################
# See 'doc/getting-started.md'
.PHONY: setup-getting-started
setup-getting-started: setup-getting-started-cluster setup-getting-started-controller setup-getting-started-usecase

.PHONY: setup-getting-started-cluster
setup-getting-started-cluster:
	make create-cluster deploy-gateway-api
	make deploy-metallb
	make deploy-istio
	make deploy-contour deploy-contour-provisioner
	make setup-external-dns-test
	make deploy-cert-manager

.PHONY: setup-getting-started-controller
setup-getting-started-controller:
	# Using 'Deploy from Local-build and YAML Artifacts' method
	make build
	make docker-build
	make cluster-load-controller-image
	make deploy
	kubectl apply -f test-data/gatewayclass-contour-istio-cert.yaml

.PHONY: setup-getting-started-usecase
setup-getting-started-usecase:
	kubectl apply -f test-data/getting-started/foo-namespaces.yaml
	kubectl apply -f test-data/getting-started/foo-gateway.yaml
	kubectl -n foo-site apply -f test-data/getting-started/app-foo-site.yaml
	kubectl -n foo-site apply -f test-data/getting-started/foo-site-httproute.yaml
	kubectl -n foo-store apply -f test-data/getting-started/app-foo-store-v1.yaml
	kubectl -n foo-store apply -f test-data/getting-started/app-foo-store-v2.yaml
	kubectl -n foo-store apply -f test-data/getting-started/foo-store-httproute.yaml

.PHONY: wait-ready-getting-started-usecase
wait-ready-getting-started-usecase:
	scripts/waitfor.sh scripts/curl.sh -s --connect-timeout 1 --fail --resolve foo.example.com:80:127.0.0.1 http://foo.example.com/site

.PHONY: tryout-getting-started-usecase
tryout-getting-started-usecase:
	$(eval GATEWAY_IP=$(shell kubectl -n foo-infra get gateway foo-gateway -o jsonpath='{.status.addresses[0].value}'))
	scripts/curl.sh -s --resolve foo.example.com:80:$(GATEWAY_IP) http://foo.example.com/site                                | grep Welcome-to-foo-site
	scripts/curl.sh -s --cacert foo-example-com.crt --resolve foo.example.com:443:$(GATEWAY_IP) https://foo.example.com/site | grep Welcome-to-foo-site
	scripts/curl.sh -s --resolve foo.example.com:80:$(GATEWAY_IP) http://foo.example.com/store                               | grep -e 'Welcome-to-foo-store-v[12]'
	scripts/curl.sh -s --cacert foo-example-com.crt --resolve foo.example.com:443:$(GATEWAY_IP) https://foo.example.com/store| grep -e 'Welcome-to-foo-store-v[12]'
